#include <iostream>
#include <string>
#include <vector>

using namespace std;
int main()
{	// 38-47 = 0-9; 48-51 = a-d; 52 = integer; + = 52; - = 53 0 = blank
	//			0		1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19		20		21	22	23	24	25	26	27	28	29		30
	/*			Program	a	b	c	d	0	1	2	3	4	5	6	7	8	9	+	-	*	/	integer	write	"	(	)	,	;	:	=	$	begin	end
	Prog		1
	Identifier			2	2	2	2
	A					3	3	3	3	4	4	4	4	4	4	4	4	4	4	37	37	37	37							37	37	37	37	37			
	dec-list			6	6	6	6
	dec					7	7	7	7
	C																														8		37
	type																						52
	stat-list			11	11	11	11																	11	
	D					12	12	12	12																	12												37
	stat				15	15	15	15																	14
	write																								16
	str					37	37	37	37																			17
	assign				19	19	19	19		
	expr				20	20	20	20	20	20	20	20	20	20	20	20	20	20	20	20								20	
	E																			21	22									37		37
	term				24	24	24	24	24	24	24	24	24	24	24	24	24	24	24	24								24	
	Q																			37	37	25	26							37		37
	factor				28	28	28	28	29	29	29	29	29	29	29	29	29	29	29	29								30
	number								31	31	31	31	31	31	31	31	31	31	31	31
	B									32	32	32	32	32	32	32	32	32	32	37	37	37	37							37		37
	sign								37	37	37	37	37	37	37	37	37	37	52	53
	digit								38	39	40	41	42	43	44	45	46	47
	id					48	49	50	51
	*/
							//   0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 	
	int grammarTable[23][31] = {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 37, 37, 37, 37, 0, 0, 0, 0, 37, 37, 37, 37, 37, 0, 0, 0},
								{0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 37, 0, 0, 0, 0},
								{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 11, 11, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37},
								{0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 37, 37, 37, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 19, 19, 19, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 37, 0, 37, 0, 0, 0, 0, 0},
								{0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 37, 25, 26, 0, 0, 0, 0, 37, 0, 37, 0, 0, 0, 0, 0},
								{0, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 0, 0, 0, 0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 37, 37, 37, 0, 0, 0, 0, 37, 0, 37, 0, 0, 0, 0, 0},
								{0, 0, 0, 0, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 52, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 0, 0, 0, 0, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
								{0, 48, 49, 50, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
	int row = 0;
	int col = 0;
	bool isValid = true;

	vector<string> stack;

	stack.push_back("$");
	stack.push_back("Prog");

	while (!stack.empty() && isValid == true)
	{

		if (stack.back() == word[wordCounter])
		{
			stack.pop_back();
			wordCounter++;

			cout << "Current Stack: ";
			for (vector<char>::iterator it = stack.begin(); it != stack.end(); ++it)
			{
				cout << *it;
			}
			cout << endl << "Matched: " << word[wordCounter - 1];
			cout << endl << endl;
		}
		else if (stack.back() == '$')
		{
			stack.pop_back();
		}
		else
		{
			switch (word[wordCounter])
			{
			case 'i':
			{
				col = 0;
				break;
			}
			case '+':
			{
				col = 1;
				break;
			}
			case '-':
			{
				col = 2;
				break;
			}
			case '*':
			{
				col = 3;
				break;
			}
			case '/':
			{
				col = 4;
				break;
			}
			case '(':
			{
				col = 5;
				break;
			}
			case ')':
			{
				col = 6;
				break;
			}
			case '$':
			{
				col = 7;
				break;
			}

			}//END SWITCH

			switch (stack.back())
			{
			case 'E':
			{
				row = 0;
				break;
			}
			case 'Q':
			{
				row = 1;
				break;
			}
			case 'T':
			{
				row = 2;
				break;
			}
			case 'R':
			{
				row = 3;
				break;
			}
			case 'F':
			{
				row = 4;
				break;
			}
			}//END SWITCH

			stack.pop_back();

			if (grammarTable[row][col] != "" && grammarTable[row][col] != "L")
			{
				for (string::reverse_iterator rit = grammarTable[row][col].rbegin(); rit != grammarTable[row][col].rend(); ++rit)
				{
					stack.push_back(*rit);
				}
			}

			if (grammarTable[row][col] == "")
			{
				isValid = false;
			}


		}

		/*cout << "Current Stack: ";
		for (vector<char>::iterator it = stack.begin(); it != stack.end(); ++it)
		{
		cout << *it;
		}
		cout << endl << "Looking For: " << word[wordCounter] << endl << endl;*/
	}//END WHILE

	if (isValid)
	{
		cout << word << " is Valid." << endl;
	}
	else
	{
		cout << word << " is not valid." << endl;
	}

	system("pause");
	return 0;
}